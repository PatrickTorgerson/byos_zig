const c = @import("c.zig").c;

// Thanks to Mach (https://github.com/hexops/mach) for this work, I didn't
// do this manually. I wrote the other Freetype bindings by hand but this
// one was... too tedius.

pub const FreetypeError = error{
    CannotOpenResource,
    UnknownFileFormat,
    InvalidFileFormat,
    InvalidVersion,
    LowerModuleVersion,
    InvalidArgument,
    UnimplementedFeature,
    InvalidTable,
    InvalidOffset,
    ArrayTooLarge,
    MissingModule,
    MissingProperty,
    InvalidGlyphIndex,
    InvalidCharacterCode,
    InvalidGlyphFormat,
    CannotRenderGlyph,
    InvalidOutline,
    InvalidComposite,
    TooManyHints,
    InvalidPixelSize,
    InvalidHandle,
    InvalidLibraryHandle,
    InvalidDriverHandle,
    InvalidFaceHandle,
    InvalidSizeHandle,
    InvalidSlotHandle,
    InvalidCharMapHandle,
    InvalidCacheHandle,
    InvalidStreamHandle,
    TooManyDrivers,
    TooManyExtensions,
    OutOfMemory,
    UnlistedObject,
    CannotOpenStream,
    InvalidStreamSeek,
    InvalidStreamSkip,
    InvalidStreamRead,
    InvalidStreamOperation,
    InvalidFrameOperation,
    NestedFrameAccess,
    InvalidFrameRead,
    RasterUninitialized,
    RasterCorrupted,
    RasterOverflow,
    RasterNegativeHeight,
    TooManyCaches,
    InvalidOpcode,
    TooFewArguments,
    StackOverflow,
    CodeOverflow,
    BadArgument,
    DivideByZero,
    InvalidReference,
    DebugOpCode,
    ENDFInExecStream,
    NestedDEFS,
    InvalidCodeRange,
    ExecutionTooLong,
    TooManyFunctionDefs,
    TooManyInstructionDefs,
    TableMissing,
    HorizHeaderMissing,
    LocationsMissing,
    NameTableMissing,
    CMapTableMissing,
    HmtxTableMissing,
    PostTableMissing,
    InvalidHorizMetrics,
    InvalidCharMapFormat,
    InvalidPPem,
    InvalidVertMetrics,
    CouldNotFindContext,
    InvalidPostTableFormat,
    InvalidPostTable,
    Syntax,
    StackUnderflow,
    Ignore,
    NoUnicodeGlyphName,
    MissingStartfontField,
    MissingFontField,
    MissingSizeField,
    MissingFontboundingboxField,
    MissingCharsField,
    MissingStartcharField,
    MissingEncodingField,
    MissingBbxField,
    BbxTooBig,
    CorruptedFontHeader,
    CorruptedFontGlyphs,
    UnknownFreetypeError,
};

pub fn errorFromInt(err: c_int) FreetypeError!void {
    return switch (err) {
        c.FT_Err_Ok => {},
        c.FT_Err_Cannot_Open_Resource => FreetypeError.CannotOpenResource,
        c.FT_Err_Unknown_File_Format => FreetypeError.UnknownFileFormat,
        c.FT_Err_Invalid_File_Format => FreetypeError.InvalidFileFormat,
        c.FT_Err_Invalid_Version => FreetypeError.InvalidVersion,
        c.FT_Err_Lower_Module_Version => FreetypeError.LowerModuleVersion,
        c.FT_Err_Invalid_Argument => FreetypeError.InvalidArgument,
        c.FT_Err_Unimplemented_Feature => FreetypeError.UnimplementedFeature,
        c.FT_Err_Invalid_Table => FreetypeError.InvalidTable,
        c.FT_Err_Invalid_Offset => FreetypeError.InvalidOffset,
        c.FT_Err_Array_Too_Large => FreetypeError.ArrayTooLarge,
        c.FT_Err_Missing_Module => FreetypeError.MissingModule,
        c.FT_Err_Missing_Property => FreetypeError.MissingProperty,
        c.FT_Err_Invalid_Glyph_Index => FreetypeError.InvalidGlyphIndex,
        c.FT_Err_Invalid_Character_Code => FreetypeError.InvalidCharacterCode,
        c.FT_Err_Invalid_Glyph_Format => FreetypeError.InvalidGlyphFormat,
        c.FT_Err_Cannot_Render_Glyph => FreetypeError.CannotRenderGlyph,
        c.FT_Err_Invalid_Outline => FreetypeError.InvalidOutline,
        c.FT_Err_Invalid_Composite => FreetypeError.InvalidComposite,
        c.FT_Err_Too_Many_Hints => FreetypeError.TooManyHints,
        c.FT_Err_Invalid_Pixel_Size => FreetypeError.InvalidPixelSize,
        c.FT_Err_Invalid_Handle => FreetypeError.InvalidHandle,
        c.FT_Err_Invalid_Library_Handle => FreetypeError.InvalidLibraryHandle,
        c.FT_Err_Invalid_Driver_Handle => FreetypeError.InvalidDriverHandle,
        c.FT_Err_Invalid_Face_Handle => FreetypeError.InvalidFaceHandle,
        c.FT_Err_Invalid_Size_Handle => FreetypeError.InvalidSizeHandle,
        c.FT_Err_Invalid_Slot_Handle => FreetypeError.InvalidSlotHandle,
        c.FT_Err_Invalid_CharMap_Handle => FreetypeError.InvalidCharMapHandle,
        c.FT_Err_Invalid_Cache_Handle => FreetypeError.InvalidCacheHandle,
        c.FT_Err_Invalid_Stream_Handle => FreetypeError.InvalidStreamHandle,
        c.FT_Err_Too_Many_Drivers => FreetypeError.TooManyDrivers,
        c.FT_Err_Too_Many_Extensions => FreetypeError.TooManyExtensions,
        c.FT_Err_Out_Of_Memory => FreetypeError.OutOfMemory,
        c.FT_Err_Unlisted_Object => FreetypeError.UnlistedObject,
        c.FT_Err_Cannot_Open_Stream => FreetypeError.CannotOpenStream,
        c.FT_Err_Invalid_Stream_Seek => FreetypeError.InvalidStreamSeek,
        c.FT_Err_Invalid_Stream_Skip => FreetypeError.InvalidStreamSkip,
        c.FT_Err_Invalid_Stream_Read => FreetypeError.InvalidStreamRead,
        c.FT_Err_Invalid_Stream_Operation => FreetypeError.InvalidStreamOperation,
        c.FT_Err_Invalid_Frame_Operation => FreetypeError.InvalidFrameOperation,
        c.FT_Err_Nested_Frame_Access => FreetypeError.NestedFrameAccess,
        c.FT_Err_Invalid_Frame_Read => FreetypeError.InvalidFrameRead,
        c.FT_Err_Raster_Uninitialized => FreetypeError.RasterUninitialized,
        c.FT_Err_Raster_Corrupted => FreetypeError.RasterCorrupted,
        c.FT_Err_Raster_Overflow => FreetypeError.RasterOverflow,
        c.FT_Err_Raster_Negative_Height => FreetypeError.RasterNegativeHeight,
        c.FT_Err_Too_Many_Caches => FreetypeError.TooManyCaches,
        c.FT_Err_Invalid_Opcode => FreetypeError.InvalidOpcode,
        c.FT_Err_Too_Few_Arguments => FreetypeError.TooFewArguments,
        c.FT_Err_Stack_Overflow => FreetypeError.StackOverflow,
        c.FT_Err_Code_Overflow => FreetypeError.CodeOverflow,
        c.FT_Err_Bad_Argument => FreetypeError.BadArgument,
        c.FT_Err_Divide_By_Zero => FreetypeError.DivideByZero,
        c.FT_Err_Invalid_Reference => FreetypeError.InvalidReference,
        c.FT_Err_Debug_OpCode => FreetypeError.DebugOpCode,
        c.FT_Err_ENDF_In_Exec_Stream => FreetypeError.ENDFInExecStream,
        c.FT_Err_Nested_DEFS => FreetypeError.NestedDEFS,
        c.FT_Err_Invalid_CodeRange => FreetypeError.InvalidCodeRange,
        c.FT_Err_Execution_Too_Long => FreetypeError.ExecutionTooLong,
        c.FT_Err_Too_Many_Function_Defs => FreetypeError.TooManyFunctionDefs,
        c.FT_Err_Too_Many_Instruction_Defs => FreetypeError.TooManyInstructionDefs,
        c.FT_Err_Table_Missing => FreetypeError.TableMissing,
        c.FT_Err_Horiz_Header_Missing => FreetypeError.HorizHeaderMissing,
        c.FT_Err_Locations_Missing => FreetypeError.LocationsMissing,
        c.FT_Err_Name_Table_Missing => FreetypeError.NameTableMissing,
        c.FT_Err_CMap_Table_Missing => FreetypeError.CMapTableMissing,
        c.FT_Err_Hmtx_Table_Missing => FreetypeError.HmtxTableMissing,
        c.FT_Err_Post_Table_Missing => FreetypeError.PostTableMissing,
        c.FT_Err_Invalid_Horiz_Metrics => FreetypeError.InvalidHorizMetrics,
        c.FT_Err_Invalid_CharMap_Format => FreetypeError.InvalidCharMapFormat,
        c.FT_Err_Invalid_PPem => FreetypeError.InvalidPPem,
        c.FT_Err_Invalid_Vert_Metrics => FreetypeError.InvalidVertMetrics,
        c.FT_Err_Could_Not_Find_Context => FreetypeError.CouldNotFindContext,
        c.FT_Err_Invalid_Post_Table_Format => FreetypeError.InvalidPostTableFormat,
        c.FT_Err_Invalid_Post_Table => FreetypeError.InvalidPostTable,
        c.FT_Err_Syntax_Error => FreetypeError.Syntax,
        c.FT_Err_Stack_Underflow => FreetypeError.StackUnderflow,
        c.FT_Err_Ignore => FreetypeError.Ignore,
        c.FT_Err_No_Unicode_Glyph_Name => FreetypeError.NoUnicodeGlyphName,
        c.FT_Err_Missing_Startfont_Field => FreetypeError.MissingStartfontField,
        c.FT_Err_Missing_Font_Field => FreetypeError.MissingFontField,
        c.FT_Err_Missing_Size_Field => FreetypeError.MissingSizeField,
        c.FT_Err_Missing_Fontboundingbox_Field => FreetypeError.MissingFontboundingboxField,
        c.FT_Err_Missing_Chars_Field => FreetypeError.MissingCharsField,
        c.FT_Err_Missing_Startchar_Field => FreetypeError.MissingStartcharField,
        c.FT_Err_Missing_Encoding_Field => FreetypeError.MissingEncodingField,
        c.FT_Err_Missing_Bbx_Field => FreetypeError.MissingBbxField,
        c.FT_Err_Bbx_Too_Big => FreetypeError.BbxTooBig,
        c.FT_Err_Corrupted_Font_Header => FreetypeError.CorruptedFontHeader,
        c.FT_Err_Corrupted_Font_Glyphs => FreetypeError.CorruptedFontGlyphs,
        else => FreetypeError.UnknownFreetypeError,
    };
}

pub fn intFromError(err: FreetypeError) c_int {
    return switch (err) {
        FreetypeError.CannotOpenResource => c.FT_Err_Cannot_Open_Resource,
        FreetypeError.UnknownFileFormat => c.FT_Err_Unknown_File_Format,
        FreetypeError.InvalidFileFormat => c.FT_Err_Invalid_File_Format,
        FreetypeError.InvalidVersion => c.FT_Err_Invalid_Version,
        FreetypeError.LowerModuleVersion => c.FT_Err_Lower_Module_Version,
        FreetypeError.InvalidArgument => c.FT_Err_Invalid_Argument,
        FreetypeError.UnimplementedFeature => c.FT_Err_Unimplemented_Feature,
        FreetypeError.InvalidTable => c.FT_Err_Invalid_Table,
        FreetypeError.InvalidOffset => c.FT_Err_Invalid_Offset,
        FreetypeError.ArrayTooLarge => c.FT_Err_Array_Too_Large,
        FreetypeError.MissingModule => c.FT_Err_Missing_Module,
        FreetypeError.MissingProperty => c.FT_Err_Missing_Property,
        FreetypeError.InvalidGlyphIndex => c.FT_Err_Invalid_Glyph_Index,
        FreetypeError.InvalidCharacterCode => c.FT_Err_Invalid_Character_Code,
        FreetypeError.InvalidGlyphFormat => c.FT_Err_Invalid_Glyph_Format,
        FreetypeError.CannotRenderGlyph => c.FT_Err_Cannot_Render_Glyph,
        FreetypeError.InvalidOutline => c.FT_Err_Invalid_Outline,
        FreetypeError.InvalidComposite => c.FT_Err_Invalid_Composite,
        FreetypeError.TooManyHints => c.FT_Err_Too_Many_Hints,
        FreetypeError.InvalidPixelSize => c.FT_Err_Invalid_Pixel_Size,
        FreetypeError.InvalidHandle => c.FT_Err_Invalid_Handle,
        FreetypeError.InvalidLibraryHandle => c.FT_Err_Invalid_Library_Handle,
        FreetypeError.InvalidDriverHandle => c.FT_Err_Invalid_Driver_Handle,
        FreetypeError.InvalidFaceHandle => c.FT_Err_Invalid_Face_Handle,
        FreetypeError.InvalidSizeHandle => c.FT_Err_Invalid_Size_Handle,
        FreetypeError.InvalidSlotHandle => c.FT_Err_Invalid_Slot_Handle,
        FreetypeError.InvalidCharMapHandle => c.FT_Err_Invalid_CharMap_Handle,
        FreetypeError.InvalidCacheHandle => c.FT_Err_Invalid_Cache_Handle,
        FreetypeError.InvalidStreamHandle => c.FT_Err_Invalid_Stream_Handle,
        FreetypeError.TooManyDrivers => c.FT_Err_Too_Many_Drivers,
        FreetypeError.TooManyExtensions => c.FT_Err_Too_Many_Extensions,
        FreetypeError.OutOfMemory => c.FT_Err_Out_Of_Memory,
        FreetypeError.UnlistedObject => c.FT_Err_Unlisted_Object,
        FreetypeError.CannotOpenStream => c.FT_Err_Cannot_Open_Stream,
        FreetypeError.InvalidStreamSeek => c.FT_Err_Invalid_Stream_Seek,
        FreetypeError.InvalidStreamSkip => c.FT_Err_Invalid_Stream_Skip,
        FreetypeError.InvalidStreamRead => c.FT_Err_Invalid_Stream_Read,
        FreetypeError.InvalidStreamOperation => c.FT_Err_Invalid_Stream_Operation,
        FreetypeError.InvalidFrameOperation => c.FT_Err_Invalid_Frame_Operation,
        FreetypeError.NestedFrameAccess => c.FT_Err_Nested_Frame_Access,
        FreetypeError.InvalidFrameRead => c.FT_Err_Invalid_Frame_Read,
        FreetypeError.RasterUninitialized => c.FT_Err_Raster_Uninitialized,
        FreetypeError.RasterCorrupted => c.FT_Err_Raster_Corrupted,
        FreetypeError.RasterOverflow => c.FT_Err_Raster_Overflow,
        FreetypeError.RasterNegativeHeight => c.FT_Err_Raster_Negative_Height,
        FreetypeError.TooManyCaches => c.FT_Err_Too_Many_Caches,
        FreetypeError.InvalidOpcode => c.FT_Err_Invalid_Opcode,
        FreetypeError.TooFewArguments => c.FT_Err_Too_Few_Arguments,
        FreetypeError.StackOverflow => c.FT_Err_Stack_Overflow,
        FreetypeError.CodeOverflow => c.FT_Err_Code_Overflow,
        FreetypeError.BadArgument => c.FT_Err_Bad_Argument,
        FreetypeError.DivideByZero => c.FT_Err_Divide_By_Zero,
        FreetypeError.InvalidReference => c.FT_Err_Invalid_Reference,
        FreetypeError.DebugOpCode => c.FT_Err_Debug_OpCode,
        FreetypeError.ENDFInExecStream => c.FT_Err_ENDF_In_Exec_Stream,
        FreetypeError.NestedDEFS => c.FT_Err_Nested_DEFS,
        FreetypeError.InvalidCodeRange => c.FT_Err_Invalid_CodeRange,
        FreetypeError.ExecutionTooLong => c.FT_Err_Execution_Too_Long,
        FreetypeError.TooManyFunctionDefs => c.FT_Err_Too_Many_Function_Defs,
        FreetypeError.TooManyInstructionDefs => c.FT_Err_Too_Many_Instruction_Defs,
        FreetypeError.TableMissing => c.FT_Err_Table_Missing,
        FreetypeError.HorizHeaderMissing => c.FT_Err_Horiz_Header_Missing,
        FreetypeError.LocationsMissing => c.FT_Err_Locations_Missing,
        FreetypeError.NameTableMissing => c.FT_Err_Name_Table_Missing,
        FreetypeError.CMapTableMissing => c.FT_Err_CMap_Table_Missing,
        FreetypeError.HmtxTableMissing => c.FT_Err_Hmtx_Table_Missing,
        FreetypeError.PostTableMissing => c.FT_Err_Post_Table_Missing,
        FreetypeError.InvalidHorizMetrics => c.FT_Err_Invalid_Horiz_Metrics,
        FreetypeError.InvalidCharMapFormat => c.FT_Err_Invalid_CharMap_Format,
        FreetypeError.InvalidPPem => c.FT_Err_Invalid_PPem,
        FreetypeError.InvalidVertMetrics => c.FT_Err_Invalid_Vert_Metrics,
        FreetypeError.CouldNotFindContext => c.FT_Err_Could_Not_Find_Context,
        FreetypeError.InvalidPostTableFormat => c.FT_Err_Invalid_Post_Table_Format,
        FreetypeError.InvalidPostTable => c.FT_Err_Invalid_Post_Table,
        FreetypeError.Syntax => c.FT_Err_Syntax_Error,
        FreetypeError.StackUnderflow => c.FT_Err_Stack_Underflow,
        FreetypeError.Ignore => c.FT_Err_Ignore,
        FreetypeError.NoUnicodeGlyphName => c.FT_Err_No_Unicode_Glyph_Name,
        FreetypeError.MissingStartfontField => c.FT_Err_Missing_Startfont_Field,
        FreetypeError.MissingFontField => c.FT_Err_Missing_Font_Field,
        FreetypeError.MissingSizeField => c.FT_Err_Missing_Size_Field,
        FreetypeError.MissingFontboundingboxField => c.FT_Err_Missing_Fontboundingbox_Field,
        FreetypeError.MissingCharsField => c.FT_Err_Missing_Chars_Field,
        FreetypeError.MissingStartcharField => c.FT_Err_Missing_Startchar_Field,
        FreetypeError.MissingEncodingField => c.FT_Err_Missing_Encoding_Field,
        FreetypeError.MissingBbxField => c.FT_Err_Missing_Bbx_Field,
        FreetypeError.BbxTooBig => c.FT_Err_Bbx_Too_Big,
        FreetypeError.CorruptedFontHeader => c.FT_Err_Corrupted_Font_Header,
        FreetypeError.CorruptedFontGlyphs => c.FT_Err_Corrupted_Font_Glyphs,
        FreetypeError.UnknownFreetypeError => -1,
    };
}

pub fn intFromErrorUnion(errunion: FreetypeError!void) c_int {
    if (errunion) |_| {
        return 0;
    } else |err| {
        return intFromError(err);
    }
}

test "error conversion" {
    const testing = @import("std").testing;
    try errorFromInt(c.FT_Err_Ok);
    try testing.expectError(FreetypeError.OutOfMemory, errorFromInt(c.FT_Err_Out_Of_Memory));
    try testing.expectEqual(@as(c_int, c.FT_Err_Invalid_Composite), intFromError(FreetypeError.InvalidComposite));
    try testing.expectError(FreetypeError.CorruptedFontGlyphs, errorFromInt(intFromError(FreetypeError.CorruptedFontGlyphs)));
    try testing.expectEqual(@as(c_int, c.FT_Err_Bbx_Too_Big), intFromErrorUnion(errorFromInt(c.FT_Err_Bbx_Too_Big)));
}
